<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-17T20:40:21+06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Aleksandr Maskalev</title><subtitle>Write about what I&apos;ve learned and what inspires me
</subtitle><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><entry><title type="html">Make It Work! Make It Right! Make It Fast!</title><link href="http://localhost:4000/docs/til/2025/06/17/make-it-work-make-it-right-make-it-fast.html" rel="alternate" type="text/html" title="Make It Work! Make It Right! Make It Fast!" /><published>2025-06-17T20:13:21+06:00</published><updated>2025-06-17T20:13:21+06:00</updated><id>http://localhost:4000/docs/til/2025/06/17/make-it-work-make-it-right-make-it-fast</id><content type="html" xml:base="http://localhost:4000/docs/til/2025/06/17/make-it-work-make-it-right-make-it-fast.html"><![CDATA[<p>That’s all!</p>

<p>Useful link on the topic:</p>

<ul>
  <li><a href="https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast">Make It Work Make It Right Make It Fast</a> from wiki.c2</li>
</ul>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="til" /><summary type="html"><![CDATA[That’s all!]]></summary></entry><entry><title type="html">The Story of How I Found and Then Lost Interest in a Small Game</title><link href="http://localhost:4000/docs/blog/2025/06/15/the-story-of-how-i-found-and-then-lost-interest-in-a-small-game.html" rel="alternate" type="text/html" title="The Story of How I Found and Then Lost Interest in a Small Game" /><published>2025-06-15T17:12:59+06:00</published><updated>2025-06-15T17:12:59+06:00</updated><id>http://localhost:4000/docs/blog/2025/06/15/the-story-of-how-i-found-and-then-lost-interest-in-a-small-game</id><content type="html" xml:base="http://localhost:4000/docs/blog/2025/06/15/the-story-of-how-i-found-and-then-lost-interest-in-a-small-game.html"><![CDATA[<p>A few months ago, I stumbled upon a video puzzle game (<a href="https://videopuzzle.org">https://videopuzzle.org</a>). As the name suggests, it’s a puzzle, but instead of assembling a static image, you piece together a short video clip. One thing that made it especially engaging was that it tracked the number of moves you made and, at the end, showed a leaderboard with how others performed.</p>

<p>At first, I was just having fun (some puzzles were pretty tricky – anyone who’s tried to assemble the sky in a jigsaw puzzle knows what I mean). Occasionally, I’d manage to find an efficient solution, but most of the time, my results were far from ideal. That got me thinking: how do you find the perfect solution?</p>

<p>I started working on the puzzles on paper, going through all the possible starting positions – which, as it turned out, weren’t that many: just 16 combinations. So the real challenge was picking the most optimal solution out of those 16.</p>

<p>I got into a routine of solving one every day, always hunting for the best approach. But it took so much time.</p>

<p>Then I remembered – I’m a programmer (ha-ha!). So I figured, why not let the computer do the boring part? After some thinking, I realized that solving the puzzle is just a matter of sorting the tiles into the correct order, though with a twist: you can only swap pieces in pairs with each move.</p>

<p>Eventually, I wrote a little script. It took the initial layout of the puzzle and gave me a step-by-step list of moves to solve it most efficiently.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GLOBAL_SWAPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{},</span>
    <span class="p">{</span><span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"down"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"down"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span>
    <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
<span class="p">)</span>


<span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span> <span class="n">swap_count</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">swaps</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
        <span class="k">while</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">correct_index</span> <span class="o">=</span> <span class="n">lst</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="n">correct_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">lst</span><span class="p">[</span><span class="n">correct_index</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">swaps</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="n">correct_index</span><span class="p">]))</span>
            <span class="n">swap_count</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">swap_count</span><span class="p">,</span> <span class="n">swaps</span>


<span class="k">def</span> <span class="nf">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">lst</span> <span class="o">=</span> <span class="n">init_lst</span><span class="p">[:]</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="s">"up"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
                <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
                <span class="p">)</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                <span class="p">)</span>
        <span class="k">elif</span> <span class="n">k</span> <span class="o">==</span> <span class="s">"down"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
                <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
                <span class="p">)</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span>
                <span class="p">)</span>
        <span class="k">elif</span> <span class="n">k</span> <span class="o">==</span> <span class="s">"left"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
                <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
                <span class="p">)</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span>
                <span class="p">)</span>
        <span class="k">elif</span> <span class="n">k</span> <span class="o">==</span> <span class="s">"right"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
                <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
                <span class="p">)</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span>
                    <span class="n">lst</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">lst</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span>
                <span class="p">)</span>
    <span class="k">return</span> <span class="n">lst</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">):</span>
    <span class="n">best_swap_count</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">"inf"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">global_swap</span> <span class="ow">in</span> <span class="n">GLOBAL_SWAPS</span><span class="p">:</span>
        <span class="n">swap_count</span><span class="p">,</span> <span class="n">swaps</span> <span class="o">=</span> <span class="n">swap</span><span class="p">(</span><span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="o">**</span><span class="n">global_swap</span><span class="p">),</span> <span class="n">swap_count</span><span class="o">=</span><span class="nb">sum</span><span class="p">(</span><span class="n">global_swap</span><span class="p">.</span><span class="n">values</span><span class="p">()))</span>
        <span class="k">if</span> <span class="n">swap_count</span> <span class="o">&lt;</span> <span class="n">best_swap_count</span><span class="p">:</span>
            <span class="n">best_swap_count</span> <span class="o">=</span> <span class="n">swap_count</span>
            <span class="n">best_global_swap</span> <span class="o">=</span> <span class="n">global_swap</span>
            <span class="n">best_swaps</span> <span class="o">=</span> <span class="n">swaps</span>
    <span class="k">return</span> <span class="n">best_swap_count</span><span class="p">,</span> <span class="n">best_global_swap</span><span class="p">,</span> <span class="n">best_swaps</span>
  

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"===== TESTS ====="</span><span class="p">)</span>
    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">up</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">up</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">down</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">down</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="p">{},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="p">{},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">14</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="p">{},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">{},</span> <span class="p">[]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"up"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">[]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="p">{</span><span class="s">"right"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
    <span class="k">assert</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="p">{</span><span class="s">"left"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">)]),</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"===== TESTS OK ====="</span><span class="p">)</span>

    <span class="n">init_lst</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Еnter the numbers through a space: "</span><span class="p">).</span><span class="n">split</span><span class="p">()]</span>
    <span class="n">best_swap_count</span><span class="p">,</span> <span class="n">best_global_swap</span><span class="p">,</span> <span class="n">best_swaps</span> <span class="o">=</span> <span class="n">main</span><span class="p">(</span><span class="n">init_lst</span><span class="o">=</span><span class="n">init_lst</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"best_swap_count = </span><span class="si">{</span><span class="n">best_swap_count</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"best_global_swap = </span><span class="si">{</span><span class="n">best_global_swap</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"best_swaps = </span><span class="si">{</span><span class="n">best_swaps</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This code <a href="/docs/til/2025/06/17/make-it-work-make-it-right-make-it-fast.html">is working</a>!</p>

<p>I was the leaderboard champion for a couple of weeks!</p>

<p><img src="/assets/blog/2025/06/15/videopuzzle-results.jpg" alt="fig. A" /></p>

<p>But then… I just got bored. I wasn’t playing anymore – I was just replaying the same sequence of moves my algorithm had figured out for me.</p>

<p>But hey, that’s programming for you: being too lazy to do something by hand, so you spend three days automating it to run in five seconds.</p>

<p>Thanks, VideoPuzzle – it was fun, right up until you turned into a terminal command.</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><summary type="html"><![CDATA[A few months ago, I stumbled upon a video puzzle game (https://videopuzzle.org). As the name suggests, it’s a puzzle, but instead of assembling a static image, you piece together a short video clip. One thing that made it especially engaging was that it tracked the number of moves you made and, at the end, showed a leaderboard with how others performed.]]></summary></entry><entry><title type="html">Using Mutable Objects as a Default Argument</title><link href="http://localhost:4000/docs/blog/2025/03/29/using-mutable-objects-as-a-default-argument.html" rel="alternate" type="text/html" title="Using Mutable Objects as a Default Argument" /><published>2025-03-29T15:51:01+06:00</published><updated>2025-03-29T15:51:01+06:00</updated><id>http://localhost:4000/docs/blog/2025/03/29/using-mutable-objects-as-a-default-argument</id><content type="html" xml:base="http://localhost:4000/docs/blog/2025/03/29/using-mutable-objects-as-a-default-argument.html"><![CDATA[<p>It looks harmless, but using a mutable object (like a list or dict) as a default argument can cause confusing and hard-to-track bugs.</p>

<p>I still remember one interview where I was asked about this — and although I knew the basic idea, I couldn’t explain it clearly or fix it properly. That moment stuck with me.</p>

<p>In this post, I’m breaking it down:</p>
<ul>
  <li>What the issue is and why it happens</li>
  <li>Several possible solutions, including the well-known None default</li>
  <li>Plus a slightly deeper dive — with a sentinel object pattern that avoids subtle edge cases</li>
</ul>

<p>You’re not alone if you’ve ever been caught off guard by this quirk. Let’s fix it for good!</p>

<h3 id="problem-description">Problem description</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span><span class="o">=</span><span class="p">[])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
<span class="p">...</span>     <span class="n">x</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">return</span> <span class="n">x</span>
<span class="p">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>The list keeps growing on every call — even though we didn’t pass anything! Becvause the default value is evaluated only once,when the function is defined — not each time it’s called.</p>

<h3 id="1st-approach">1st approach</h3>
<p>Checking for an empty list inside the function</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span><span class="o">=</span><span class="p">[])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
<span class="p">...</span>     <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span><span class="p">:</span>
<span class="p">...</span>             <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">...</span>     <span class="n">x</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">return</span> <span class="n">x</span>
<span class="p">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>       
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>It works, but keep in mind that <code class="language-plaintext highlighter-rouge">not x</code> triggers <code class="language-plaintext highlighter-rouge">__bool__()</code> or <code class="language-plaintext highlighter-rouge">__len__()</code> under the hood.</p>

<h3 id="common-solution">Common solution</h3>
<p>This is a common and cleaner approach. ‘is’ is not overloadable, so it safely compares identities.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]:</span>
<span class="p">...</span>     <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> 
<span class="p">...</span>             <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">...</span>     <span class="n">x</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   
<span class="p">...</span>     <span class="k">return</span> <span class="n">x</span>
<span class="p">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>Caveat: someone could pass <code class="language-plaintext highlighter-rouge">None</code> explicitly — which might not be what you want.</p>

<h3 id="the-best-solution">The best solution!</h3>
<p>For full control, define a unique placeholder object that no one can accidentally pass in.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">_sentinel</span><span class="p">:</span> <span class="n">Any</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span> <span class="o">=</span> <span class="n">_sentinel</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]:</span>
<span class="p">...</span>     <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">_sentinel</span><span class="p">:</span>
<span class="p">...</span>             <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">...</span>     <span class="n">x</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">...</span>     <span class="k">return</span> <span class="n">x</span>
<span class="p">...</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>                    
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>Clear, safe, and ensures that only actual lists are accepted.</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><category term="python" /><summary type="html"><![CDATA[It looks harmless, but using a mutable object (like a list or dict) as a default argument can cause confusing and hard-to-track bugs.]]></summary></entry><entry><title type="html">A Minimal Example of Python’s Descriptor</title><link href="http://localhost:4000/docs/til/2024/08/14/a-minimal-example-of-python's-descriptor.html" rel="alternate" type="text/html" title="A Minimal Example of Python’s Descriptor" /><published>2024-08-14T14:37:18+06:00</published><updated>2024-08-14T14:37:18+06:00</updated><id>http://localhost:4000/docs/til/2024/08/14/a-minimal-example-of-python&apos;s-descriptor</id><content type="html" xml:base="http://localhost:4000/docs/til/2024/08/14/a-minimal-example-of-python&apos;s-descriptor.html"><![CDATA[<p>A minimal example of Python’s descriptor</p>

<p>Today I’ve looked into Python’s descriptors to find a minimal example of it.</p>

<p>What I done.</p>

<p>It known that in descriptor you can define methods <code class="language-plaintext highlighter-rouge">__set__()</code>, <code class="language-plaintext highlighter-rouge">__get__(),</code> and <code class="language-plaintext highlighter-rouge">__delete__()</code> to manage of accessing to object’s attributes. But what is the minimal set of these methods you can define in your descriptor? To find the answer to this question I created three classes, each consisting only of one method.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">foo</span><span class="p">,</span> <span class="n">bar</span><span class="p">,</span> <span class="n">baz</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_foo</span> <span class="o">=</span> <span class="n">foo</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_bar</span> <span class="o">=</span> <span class="n">bar</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_baz</span> <span class="o">=</span> <span class="n">baz</span>
    
    <span class="k">class</span> <span class="nc">D_set</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__set__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"__set__ method"</span><span class="p">)</span>
            <span class="n">instance</span><span class="p">.</span><span class="n">_foo</span> <span class="o">=</span> <span class="n">value</span>


    <span class="k">class</span> <span class="nc">D_get</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__get__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">owner</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"__get__ method"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">instance</span><span class="p">.</span><span class="n">_bar</span>


    <span class="k">class</span> <span class="nc">D_delete</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__delete__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"__delete__ method"</span><span class="p">)</span>
            <span class="k">del</span> <span class="n">instance</span><span class="p">.</span><span class="n">_baz</span>

    <span class="n">foo</span> <span class="o">=</span> <span class="n">D_set</span><span class="p">()</span>
    <span class="n">bar</span> <span class="o">=</span> <span class="n">D_get</span><span class="p">()</span>
    <span class="n">baz</span> <span class="o">=</span> <span class="n">D_delete</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">foo</span>
<span class="o">&lt;</span><span class="n">foo</span><span class="p">.</span><span class="n">Foo</span><span class="p">.</span><span class="n">D_set</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7d5498c40f40</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">bar</span>
<span class="n">__get__</span> <span class="n">method</span>
<span class="s">'bar'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">baz</span>
<span class="o">&lt;</span><span class="n">foo</span><span class="p">.</span><span class="n">Foo</span><span class="p">.</span><span class="n">D_delete</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7d5498c40d60</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>You can see that only the <code class="language-plaintext highlighter-rouge">D_get</code> class is a real descriptor (it manages to access to the <code class="language-plaintext highlighter-rouge">self._bar</code> attribute). Others are not descriptors, because values of <code class="language-plaintext highlighter-rouge">self._foo</code> and <code class="language-plaintext highlighter-rouge">self._baz</code> attributes are instances, not strings.</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="til" /><summary type="html"><![CDATA[A minimal example of Python’s descriptor]]></summary></entry><entry><title type="html">I Don’t Know How Git is Working</title><link href="http://localhost:4000/docs/idk/2024/05/31/i-don't-know-how-git-is-working.html" rel="alternate" type="text/html" title="I Don’t Know How Git is Working" /><published>2024-05-31T18:03:29+06:00</published><updated>2024-05-31T18:03:29+06:00</updated><id>http://localhost:4000/docs/idk/2024/05/31/i-don&apos;t-know-how-git-is-working</id><content type="html" xml:base="http://localhost:4000/docs/idk/2024/05/31/i-don&apos;t-know-how-git-is-working.html"><![CDATA[<p>But it’s amazing technology!</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="idk" /><summary type="html"><![CDATA[But it’s amazing technology!]]></summary></entry><entry><title type="html">Navigating Your Jekyll Website with Tags</title><link href="http://localhost:4000/docs/blog/2024/04/23/navigating-your-jekyll-website-with-tags.html" rel="alternate" type="text/html" title="Navigating Your Jekyll Website with Tags" /><published>2024-04-23T23:04:02+06:00</published><updated>2024-04-23T23:04:02+06:00</updated><id>http://localhost:4000/docs/blog/2024/04/23/navigating-your-jekyll-website-with-tags</id><content type="html" xml:base="http://localhost:4000/docs/blog/2024/04/23/navigating-your-jekyll-website-with-tags.html"><![CDATA[<p>So, I decided to enhance the navigation on my website and add tags functionality to my posts.</p>

<p>Here’s what I wanted to accomplish:</p>

<ol>
  <li>Add tags to all of my posts.</li>
  <li>Create a page listing all tags.</li>
  <li>Create individual pages for each tag listing all relevant posts.</li>
</ol>

<p>The first step was to define the “tag” variable in the Front Matter section for each post. For example, here’s how I did it for this post:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Navigating</span><span class="nv"> </span><span class="s">Your</span><span class="nv"> </span><span class="s">Jekyll</span><span class="nv"> </span><span class="s">Website</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">Tags"</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">jekyll</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>Next, I added a block to handle tags processing in the <code class="language-plaintext highlighter-rouge">post.html</code> layout:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>
  {% if page.tags %}
    {% assign tags = page.tags | remove: "[" | remove: "]" | replace: '"', '' | split: ", " %}
    {% for tag in tags %}
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/{{ tag }}"</span><span class="nt">&gt;</span>#{{ tag }}<span class="nt">&lt;/a&gt;</span>
    {% endfor %}
  {% endif %}
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>In the next step, I needed to create a page listing all tags. I created the <code class="language-plaintext highlighter-rouge">tags.html</code> layout:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: base
---

{% assign tags = site.tags %}

<span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"page-heading"</span><span class="nt">&gt;</span>{{ page.title }}<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">style=</span><span class="s">'padding-top: 16px;'</span><span class="nt">&gt;</span>
  {% for tag in tags %}
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/{{ tag[0] }}"</span><span class="nt">&gt;</span>{{ tag[0] }} ({{ tag[1] | size }})<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  {% endfor %}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>And added the corresponding .md file:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">tags</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Tags</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/tags/</span>
<span class="nn">---</span>
</code></pre></div></div>

<p><a href="https://maskalev.github.io/tags/">Link</a> to my tags list page.</p>

<p>Finally, I created individual pages for each tag listing all relevant posts. For this, I created the <code class="language-plaintext highlighter-rouge">tag.html</code> layout:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: base
---

<span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Articles tagged with "{{ page.tags }}"<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">style=</span><span class="s">'padding-top: 16px;'</span><span class="nt">&gt;</span>
    {% for post in site.posts %}
      {% if post.tags contains page.tags %}
        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"{{ post.url }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>, published {{ post.date | date: "%Y-%m-%d" }}<span class="nt">&lt;/li&gt;</span>
      {% endif %}
    {% endfor %}
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Then, I created a <code class="language-plaintext highlighter-rouge">tags</code> directory in the project root and for each tag, I created a .md file. For example:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">tag</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">jekyll</span>
<span class="nn">---</span>
</code></pre></div></div>

<p><a href="https://maskalev.github.io/tags/jekyll">Link</a> to <code class="language-plaintext highlighter-rouge">jelyll</code> tag page on this web-site.</p>

<p>Note: There are different approaches to naming the directory for tags. Some recommend <code class="language-plaintext highlighter-rouge">_tags</code>, but this didn’t work for me. Perhaps you have your own thoughts on this, and I’d be glad to hear them in the comments!</p>

<p>Useful links on the topic:</p>

<ul>
  <li><a href="https://jekyllrb.com/docs/front-matter/">Description of Font Matter</a> from Jekyll’s docs</li>
  <li><a href="https://jekyllrb.com/docs/variables/#site-variables">Description of site variables</a> from Jekyll’s docs</li>
  <li><a href="https://jekyllrb.com/docs/variables/#page-variables">Description of page variables</a> from Jekyll’s docs</li>
  <li><a href="https://www.untangled.dev/2020/06/02/tag-management-jekyll/">How do I tag posts in Jekyll? Jekyll tagging made simple</a> from blog of Joseph Victor Zammit</li>
  <li><a href="https://blog.lunarlogic.com/2019/managing-tags-in-jekyll-blog-easily/">Managing tags in Jekyll blog easily</a> from blog of Lunar Logic</li>
  <li><a href="https://github.com/maskalev/maskalev.github.io">Source code of this site:)</a></li>
</ul>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><category term="jekyll" /><summary type="html"><![CDATA[So, I decided to enhance the navigation on my website and add tags functionality to my posts.]]></summary></entry><entry><title type="html">Creating Multiple Blogs in a Single Jekyll Website</title><link href="http://localhost:4000/docs/blog/2024/04/06/creating-multiple-blogs-in-a-single-jekyll-website.html" rel="alternate" type="text/html" title="Creating Multiple Blogs in a Single Jekyll Website" /><published>2024-04-06T10:01:40+06:00</published><updated>2024-04-06T10:01:40+06:00</updated><id>http://localhost:4000/docs/blog/2024/04/06/creating-multiple-blogs-in-a-single-jekyll-website</id><content type="html" xml:base="http://localhost:4000/docs/blog/2024/04/06/creating-multiple-blogs-in-a-single-jekyll-website.html"><![CDATA[<p>At the outset, I’ll mention that I’m using the “minima” theme, but I don’t think it significantly affects the process.</p>

<p>So, at some point, I decided that I needed to create multiple independent blogs on my website. For example, the main blog (the one you’re reading right now) and a TIL (Today I Learned) blog for short notes on interesting things.</p>

<p>First, I familiarized myself with the “category” variable.</p>

<p>The Jekyll documentation provides the following description:</p>

<blockquote>
  <p>Instead of placing posts inside of folders, you can specify one or more categories that the post belongs to. When the site is generated the post will act as though it had been set with these categories normally. Categories (plural key) can be specified as a YAML list or a space-separated string.</p>
</blockquote>

<p>It seems like just what I need!</p>

<p>Obviously, I want to add links to both blogs in the page header so that I can navigate to the desired blog at any time.</p>

<p>To do this, I created two documents in the root directory to describe these links:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># blog.md
---
</span>layout: blog
title: Blog
permalink: /blog/
<span class="p">
---
</span>
<span class="gh"># til.md
---
</span>layout: til
title: TIL
permalink: /til/
<span class="p">
---
</span></code></pre></div></div>

<p>Also, in <code class="language-plaintext highlighter-rouge">_config.yml</code>, I added a section called <code class="language-plaintext highlighter-rouge">header_pages</code>. It’s not mandatory, but it allows you to control the order of links in the header (without this section, the links are arranged in alphabetical order).</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">header_pages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">blog.md</span>
  <span class="pi">-</span> <span class="s">til.md</span>
</code></pre></div></div>

<p>The last thing left to do was to describe the corresponding templates in the <code class="language-plaintext highlighter-rouge">_layouts</code> directory.</p>

<p>They are very similar to the default <code class="language-plaintext highlighter-rouge">home.html</code> page, with just one difference – the line:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% assign posts = site.posts %}
</code></pre></div></div>

<p>I replaced it with:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># blog.html</span>
{% assign posts = site.categories.blog %}<span class="sb">


</span><span class="gh"># til.html</span>
{% assign posts = site.categories.til %}
</code></pre></div></div>

<p>Now, all you need to do is specify the <code class="language-plaintext highlighter-rouge">categories</code> variable in the <code class="language-plaintext highlighter-rouge">.md</code> file with the post text. For example, for this post:</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Creating</span><span class="nv"> </span><span class="s">Multiple</span><span class="nv"> </span><span class="s">Blogs</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">Single</span><span class="nv"> </span><span class="s">Jekyll</span><span class="nv"> </span><span class="s">Website"</span>
<span class="na">date</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2024-04-06</span><span class="nv"> </span><span class="s">10:01:40</span><span class="nv"> </span><span class="s">+0600"</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">blog</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>I would like to note separately that adding multiple categories also works perfectly!</p>

<p>Useful links on the topic:</p>

<ul>
  <li><a href="https://jekyllrb.com/docs/front-matter/#predefined-variables-for-posts">Description of predefined variables for posts</a> from Jekyll’s docs</li>
  <li><a href="https://jekyllrb.com/docs/variables/#site-variables">Description of site variables</a> from Jekyll’s docs</li>
  <li><a href="https://jekyllrb.com/docs/variables/#page-variables">Description of page variables</a> from Jekyll’s docs</li>
  <li><a href="https://stackoverflow.com/questions/14560687/multiple-blogs-in-single-jekyll-website/">Discussion on Stackoverflow</a></li>
  <li><a href="https://github.com/jekyll/minima">Source code of Minima theme</a></li>
  <li><a href="https://github.com/maskalev/maskalev.github.io">Source code of this site:)</a></li>
</ul>

<p>Discussions are welcome!</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><category term="jekyll" /><summary type="html"><![CDATA[At the outset, I’ll mention that I’m using the “minima” theme, but I don’t think it significantly affects the process.]]></summary></entry><entry><title type="html">Displaying Excess Items in Cart: How?</title><link href="http://localhost:4000/docs/blog/2024/03/18/displaying-excess-items-in-cart-how.html" rel="alternate" type="text/html" title="Displaying Excess Items in Cart: How?" /><published>2024-03-18T20:02:36+06:00</published><updated>2024-03-18T20:02:36+06:00</updated><id>http://localhost:4000/docs/blog/2024/03/18/displaying-excess-items-in-cart:-how</id><content type="html" xml:base="http://localhost:4000/docs/blog/2024/03/18/displaying-excess-items-in-cart-how.html"><![CDATA[<p>This post is based on the 8th chapter of an amazing book “Django 4 by example” written by <a href="https://www.linkedin.com/in/amele/">Antonio Melé</a>.</p>

<p>I am faced with such a problem: how can I display the quantity of an item in the shopping cart that is more than available for selection?</p>

<p>Let’s say a user can add from 1 to 20 products from the product card. Also in the shopping cart, it can replace the current quantity with a new value from 1 to 20.</p>

<p>Imagine that a user has added 20 units of a certain product to the cart (<em>fig. A</em>).</p>

<p><img src="/assets/blog/2024/03/18/image-1.png" alt="fig. A" /></p>

<p>What happens if a user wants to add another 20 units of the same product from its card?
It can be seen that the total amount is indicated correctly, but the quantity is not (<em>fig. B</em>)!</p>

<p><img src="/assets/blog/2024/03/18/image-2.png" alt="fig. B" /></p>

<p>This can confuse the user.</p>

<p>To fix this, when initializing the form, you need to compare the current value with the maximum allowed value. If it is larger, then add it to the list of available values.</p>

<p>It was:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># forms.py
</span>
<span class="n">PRODUCT_QUANTITY_CHOICES</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">)]</span>


<span class="k">class</span> <span class="nc">CartAddProductForm</span><span class="p">(</span><span class="n">forms</span><span class="p">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="n">quantity</span> <span class="o">=</span> <span class="n">forms</span><span class="p">.</span><span class="n">TypedChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">PRODUCT_QUANTITY_CHOICES</span><span class="p">,</span> <span class="nb">coerce</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">override</span> <span class="o">=</span> <span class="n">forms</span><span class="p">.</span><span class="n">BooleanField</span><span class="p">(</span>
        <span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">initial</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="p">.</span><span class="n">HiddenInput</span>
    <span class="p">)</span>


<span class="c1"># views.py
</span>
<span class="k">def</span> <span class="nf">cart_detail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">cart</span> <span class="o">=</span> <span class="n">Cart</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cart</span><span class="p">:</span>
        <span class="n">item</span><span class="p">[</span><span class="s">"update_quantity_form"</span><span class="p">]</span> <span class="o">=</span> <span class="n">CartAddProductForm</span><span class="p">(</span>
            <span class="n">initial</span><span class="o">=</span><span class="p">{</span><span class="s">"quantity"</span><span class="p">:</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">],</span> <span class="s">"override"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"cart/detail.html"</span><span class="p">,</span> <span class="p">{</span><span class="s">"cart"</span><span class="p">:</span> <span class="n">cart</span><span class="p">})</span>
</code></pre></div></div>

<p>It became:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># forms.py
</span>
<span class="n">PRODUCT_QUANTITY_CHOICES</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">)]</span>


<span class="k">class</span> <span class="nc">CartAddProductForm</span><span class="p">(</span><span class="n">forms</span><span class="p">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="n">quantity</span> <span class="o">=</span> <span class="n">forms</span><span class="p">.</span><span class="n">TypedChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="p">[],</span> <span class="nb">coerce</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">override</span> <span class="o">=</span> <span class="n">forms</span><span class="p">.</span><span class="n">BooleanField</span><span class="p">(</span>
        <span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">initial</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="p">.</span><span class="n">HiddenInput</span>
    <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">max_quantity</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"max_quantity"</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">CartAddProductForm</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fields</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">].</span><span class="n">choices</span> <span class="o">=</span> <span class="n">PRODUCT_QUANTITY_CHOICES</span>
        <span class="k">if</span> <span class="n">max_quantity</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">fields</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">].</span><span class="n">choices</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">max_quantity</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">max_quantity</span><span class="p">)))</span>


<span class="c1"># views.py
</span>
<span class="k">def</span> <span class="nf">cart_detail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">cart</span> <span class="o">=</span> <span class="n">Cart</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cart</span><span class="p">:</span>
        <span class="n">max_quantity</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
            <span class="n">max_quantity</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">]</span>
        <span class="n">item</span><span class="p">[</span><span class="s">"update_quantity_form"</span><span class="p">]</span> <span class="o">=</span> <span class="n">CartAddProductForm</span><span class="p">(</span>
            <span class="n">initial</span><span class="o">=</span><span class="p">{</span><span class="s">"quantity"</span><span class="p">:</span> <span class="n">item</span><span class="p">[</span><span class="s">"quantity"</span><span class="p">],</span> <span class="s">"override"</span><span class="p">:</span> <span class="bp">True</span><span class="p">},</span>
            <span class="n">max_quantity</span><span class="o">=</span><span class="n">max_quantity</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"cart/detail.html"</span><span class="p">,</span> <span class="p">{</span><span class="s">"cart"</span><span class="p">:</span> <span class="n">cart</span><span class="p">})</span>
</code></pre></div></div>

<p>Now the user sees the correct value in the shopping cart (<em>fig. C</em>)!</p>

<p><img src="/assets/blog/2024/03/18/image-3.png" alt="fig. C" /></p>

<p>Note that it can replace the quantity with the same values as before.</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><category term="django" /><summary type="html"><![CDATA[This post is based on the 8th chapter of an amazing book “Django 4 by example” written by Antonio Melé.]]></summary></entry><entry><title type="html">How to Parse XML with Non-Unique Tags?</title><link href="http://localhost:4000/docs/blog/2024/02/05/how-to-parse-xml-with-non-unique-tags.html" rel="alternate" type="text/html" title="How to Parse XML with Non-Unique Tags?" /><published>2024-02-05T15:30:24+06:00</published><updated>2024-02-05T15:30:24+06:00</updated><id>http://localhost:4000/docs/blog/2024/02/05/how-to-parse-xml-with-non-unique-tags</id><content type="html" xml:base="http://localhost:4000/docs/blog/2024/02/05/how-to-parse-xml-with-non-unique-tags.html"><![CDATA[<p>It is not difficult to parse an XML document in which all tags are unique (or the path to them is unique). And it’s good if that’s how your schemes are described! But they are not always described the way you want them to be. Clients often come to you with their own schemes that cannot be changed. And you will have to process, for example, such a document:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?𝚡𝚖𝚕 𝚟𝚎𝚛𝚜𝚒𝚘𝚗="𝟷.𝟶" 𝚎𝚗𝚌𝚘𝚍𝚒𝚗𝚐="𝚄𝚃𝙵-𝟾"?&gt;</span>
<span class="nt">&lt;𝚋𝚘𝚍𝚢&gt;</span>
   <span class="nt">&lt;𝚙𝚊𝚛𝚝𝚗𝚎𝚛𝚜&gt;</span>
       <span class="nt">&lt;𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
           <span class="nt">&lt;𝚛𝚘𝚕𝚎&gt;</span>𝚜𝚞𝚙𝚙𝚕𝚒𝚎𝚛<span class="nt">&lt;/𝚛𝚘𝚕𝚎&gt;</span>
           <span class="nt">&lt;𝚗𝚊𝚖𝚎&gt;</span>𝚏𝚊𝚌𝚝𝚘𝚛𝚢<span class="nt">&lt;/𝚗𝚊𝚖𝚎&gt;</span>
           <span class="nt">&lt;𝚌𝚘𝚍𝚎&gt;</span>𝟷𝟸𝟹𝟺𝟻𝟼<span class="nt">&lt;/𝚌𝚘𝚍𝚎&gt;</span>
       <span class="nt">&lt;/𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
       <span class="nt">&lt;𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
           <span class="nt">&lt;𝚛𝚘𝚕𝚎&gt;</span>𝚛𝚎𝚜𝚎𝚕𝚕𝚎𝚛<span class="nt">&lt;/𝚛𝚘𝚕𝚎&gt;</span>
           <span class="nt">&lt;𝚗𝚊𝚖𝚎&gt;</span>𝚜𝚝𝚘𝚛𝚎<span class="nt">&lt;/𝚗𝚊𝚖𝚎&gt;</span>
           <span class="nt">&lt;𝚌𝚘𝚍𝚎&gt;</span>𝟸𝟹𝟺𝟻𝟼𝟽<span class="nt">&lt;/𝚌𝚘𝚍𝚎&gt;</span>
       <span class="nt">&lt;/𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
       <span class="nt">&lt;𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
           <span class="nt">&lt;𝚛𝚘𝚕𝚎&gt;</span>𝚌𝚞𝚜𝚝𝚘𝚖𝚎𝚛<span class="nt">&lt;/𝚛𝚘𝚕𝚎&gt;</span>
           <span class="nt">&lt;𝚗𝚊𝚖𝚎&gt;</span>𝚙𝚎𝚛𝚜𝚘𝚗<span class="nt">&lt;/𝚗𝚊𝚖𝚎&gt;</span>
           <span class="nt">&lt;𝚌𝚘𝚍𝚎&gt;</span>𝟹𝟺𝟻𝟼𝟽𝟾<span class="nt">&lt;/𝚌𝚘𝚍𝚎&gt;</span>
       <span class="nt">&lt;/𝚙𝚊𝚛𝚝𝚗𝚎𝚛&gt;</span>
   <span class="nt">&lt;/𝚙𝚊𝚛𝚝𝚗𝚎𝚛𝚜&gt;</span>
<span class="nt">&lt;/𝚋𝚘𝚍𝚢&gt;</span>
</code></pre></div></div>

<p>As you can see, there are several <code class="language-plaintext highlighter-rouge">𝚙𝚊𝚛𝚝𝚗𝚎𝚛</code> segments here that describe the participants in a particular chain. We are interested in the tag <code class="language-plaintext highlighter-rouge">𝚌𝚘𝚍𝚎</code> of the participant with the <code class="language-plaintext highlighter-rouge">𝚛𝚘𝚕𝚎 = 𝚛𝚎𝚜𝚎𝚕𝚕𝚎𝚛</code>. The problem is that the document provider does not guarantee either the number of <code class="language-plaintext highlighter-rouge">𝚙𝚊𝚛𝚝𝚗𝚎𝚛</code> segments or their order (<code class="language-plaintext highlighter-rouge">𝚛𝚘𝚕𝚎 = 𝚌𝚞𝚜𝚝𝚘𝚖𝚎𝚛</code> may precede <code class="language-plaintext highlighter-rouge">𝚛𝚘𝚕𝚎 = 𝚜𝚞𝚙𝚙𝚕𝚒𝚎𝚛</code>). It is even possible that the segment we need will be missing!</p>

<p>A map is ideal for solving the problem, where the keys are the contents of the <code class="language-plaintext highlighter-rouge">𝚛𝚘𝚕𝚎</code> tags, and the values are the contents of the <code class="language-plaintext highlighter-rouge">𝚌𝚘𝚍𝚎</code> tags. It will turn out something like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">𝚖𝚊𝚙_</span> <span class="o">=</span> <span class="p">{</span><span class="s">"𝚜𝚞𝚙𝚙𝚕𝚒𝚎𝚛"</span><span class="p">:</span> <span class="s">"𝟷𝟸𝟹𝟺𝟻𝟼"</span><span class="p">,</span> <span class="s">"𝚛𝚎𝚜𝚎𝚕𝚕𝚎𝚛"</span><span class="p">:</span> <span class="s">"𝟸𝟹𝟺𝟻𝟼𝟽"</span><span class="p">,</span> <span class="s">"𝚌𝚞𝚜𝚝𝚘𝚖𝚎𝚛"</span><span class="p">:</span> <span class="s">"𝟹𝟺𝟻𝟼𝟽𝟾"</span><span class="p">}</span>
</code></pre></div></div>

<p>In the end, we just need to extract the value of the desired key!</p>

<p>Of course, you may need to deal with various exceptions (for example, empty or missing tags), but this, as well as the way to get a map, depends on your preferences and technical specifications (if you are lucky enough to have one). I just tried to talk about the method, not about its specific technical implementation.</p>]]></content><author><name>Aleksandr Maskalev</name><email>avmaskalev@gmail.com</email></author><category term="docs" /><category term="blog" /><category term="xml" /><summary type="html"><![CDATA[It is not difficult to parse an XML document in which all tags are unique (or the path to them is unique). And it’s good if that’s how your schemes are described! But they are not always described the way you want them to be. Clients often come to you with their own schemes that cannot be changed. And you will have to process, for example, such a document:]]></summary></entry></feed>